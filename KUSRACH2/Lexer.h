#pragma once
#include "Types.h"

//состояния конечного автомата
enum States {
	ER = 0,		//ошибка(конечное состояние)
	H,		//начало
	I,		//индентификатор
	N2,		//двоичное число
	N8,		//восьмиричное число
	N10,	//десятичное число
	N16,	//шестнадцатиричное число
	C1,		//комментарий(начало)
	C2,		//комментарий(содержание)
	C3,		//комментарий(конец)
	M1,		//меньше, меньше или равно, неравно
	M2,		//больше, больше или равно, равно
	P1,		//точка
	P2,		//дробна часть числа
	B,		//символ B
	O,		//символ O
	D,		//символ D
	HX,		//символ H
	E11,	//символ E
	E12,	//порядок числа в экспоненциальной форме
	E13,	//порядок числа в экспоненциальной форме
	E22,	//порядок числа в экспоненциальной форме
	ZN,		//знак порядка числа в экспоненциальной форме
	E21,	//знак порядка числа в экспоненциальной форме
	OG,		//ограничитель
	V,		//выход(конечное состояние)
};

class Lexer
{
	int d;										//переменная для формирования целого значения константы
	char CH;									//входной символ
	std::string S;								//буффер для накапливания символов лексемы
	enum States CS;								//текущее состояние
	std::string filename;						//имя файла с кодом
	std::fstream lexeme_file;					//файл с лексемами
	std::fstream example_program;				//программа для анализа

	
	bool gc();									//процедура считывания очередного символа в переменную CH
	bool let();									//логическая функция, проверяющая, является ли переменная CH буквой
	bool digit();								//логическая функция, проверяющая, является ли переменная CH цифрой
	void nill();								//процедура очистки буфера S
	void add();									//процедура добавления очередного символа в конец 
	int look(enum class Table_index t);			//функция поиска лексемы из буфера S в таблице t
	int put(enum class Table_index t);			//процедура записи лексемы из буфера S в таблицу t
	void out(enum class Table_index, int);		//процедура записи пары чисел (n,t) в файл лексем
	bool check_hex();							//логическая функция, проверяющая, является ли переменная CH цифрой или буквой из диапазона a..fA..F
	bool AFH();									//логическая функция, подобная check_hex, но дополнительно проверяет, является ли CH буквой H или h
	void translate(int);						//процедура перевода числа в буфере из системы счисления по основанию base в десятичную СС
	void convert();								//процедура перевода числа в буфере из строковой формы записи в десятичную форму

public:
	Lexer(std::string);
	bool scanner();								//начало анализа
	void print_lexems();
	~Lexer();
};

